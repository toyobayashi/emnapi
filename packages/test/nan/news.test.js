'use strict'
const assert = require('assert')

module.exports = {
  target: 'nan_news',
  test: async function (bindings) {
    assert.strictEqual(typeof bindings.newNumber, 'function')
    assert.strictEqual(typeof bindings.newPositiveInteger, 'function')
    assert.strictEqual(typeof bindings.newNegativeInteger, 'function')
    assert.strictEqual(typeof bindings.newUnsignedInteger, 'function')
    assert.strictEqual(typeof bindings.newInt32FromPositive, 'function')
    assert.strictEqual(typeof bindings.newInt32FromNegative, 'function')
    assert.strictEqual(typeof bindings.newUint32FromPositive, 'function')
    assert.strictEqual(typeof bindings.newUint32FromNegative, 'function')
    assert.strictEqual(typeof bindings.newUtf8String, 'function')
    assert.strictEqual(typeof bindings.newLatin1String, 'function')
    assert.strictEqual(typeof bindings.newUcs2String, 'function')
    assert.strictEqual(typeof bindings.newStdString, 'function')
    assert.strictEqual(typeof bindings.newRegExp, 'function')
    assert.strictEqual(typeof bindings.newStringObject, 'function')
    assert.strictEqual(typeof bindings.newNumberObject, 'function')
    assert.strictEqual(typeof bindings.newBooleanObject, 'function')
    assert.strictEqual(typeof bindings.newExternal, 'function')
    assert.strictEqual(typeof bindings.newSignature, 'function')
    assert.strictEqual(typeof bindings.newScript, 'function')
    assert.strictEqual(typeof bindings.newScript2, 'function')
    assert.strictEqual(typeof bindings.compileScript, 'function')
    assert.strictEqual(typeof bindings.compileScript2, 'function')
    assert.strictEqual(typeof bindings.newDate, 'function')
    assert.strictEqual(typeof bindings.newArray, 'function')
    assert.strictEqual(typeof bindings.newBoolean, 'function')
    assert.strictEqual(typeof bindings.newBoolean2, 'function')

    assert.strictEqual(bindings.newNumber(), 0.5)
    assert.strictEqual(bindings.newPositiveInteger(), 1)
    assert.strictEqual(bindings.newNegativeInteger(), -1)
    assert.strictEqual(bindings.newUnsignedInteger(), 0xFFFFFFFF)
    assert.strictEqual(bindings.newInt32FromPositive(), -1)
    assert.strictEqual(bindings.newInt32FromNegative(), -1)
    assert.strictEqual(bindings.newUint32FromPositive(), 0xFFFFFFFF)
    assert.strictEqual(bindings.newUint32FromNegative(), 0xFFFFFFFF)
    assert.strictEqual(bindings.newUtf8String(), 'str誰ng')
    assert.strictEqual(bindings.newLatin1String(), 'str誰ng')
    assert.strictEqual(bindings.newUcs2String(), 'str誰ng')
    assert.strictEqual(bindings.newStdString(), 'str誰ng')
    assert.strictEqual(bindings.newRegExp().toString(), '/foo/')
    assert.deepStrictEqual(bindings.newStringObject(), new String("foo"))
    assert.deepStrictEqual(bindings.newNumberObject(), new Number(0.5))
    assert.deepStrictEqual(bindings.newBooleanObject(), new Boolean(true))
    assert.strictEqual(bindings.newExternal(), 'passed')
    assert.strictEqual(bindings.newSignature(), 'string')
    assert.strictEqual(bindings.newScript(), 6)
    assert.strictEqual(bindings.newScript2(), 6)
    assert.strictEqual(bindings.compileScript(), 6)
    assert.strictEqual(bindings.compileScript2(), 6)
    assert.deepStrictEqual(bindings.newDate(), new Date(1337))
    assert.deepStrictEqual(bindings.newArray(), [])
    assert.strictEqual(bindings.newBoolean(), true)
    assert.strictEqual(bindings.newBoolean2(), true)
  }
}
